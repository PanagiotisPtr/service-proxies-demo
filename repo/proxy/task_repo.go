// Code generated by go-gen-proxy; DO NOT EDIT.
package proxy

import (
	"context"
	"fmt"
	"github.com/eiiches/go-gen-proxy/pkg/handler"
	"github.com/panagiotisptr/service-proxies-demo/models"
)

type TaskRepository struct {
	Handler handler.InvocationHandler
}

func (this *TaskRepository) Create(arg0 context.Context, arg1 *models.Task) error {
	args := []interface{}{
		arg0,
		arg1,
	}

	rets := this.Handler.Invoke("Create", args)

	ret0, ok := rets[0].(error)
	if rets[0] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid error value", rets[0]))
	}

	return ret0
}

func (this *TaskRepository) Delete(arg0 context.Context, arg1 int64) error {
	args := []interface{}{
		arg0,
		arg1,
	}

	rets := this.Handler.Invoke("Delete", args)

	ret0, ok := rets[0].(error)
	if rets[0] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid error value", rets[0]))
	}

	return ret0
}

func (this *TaskRepository) Get(arg0 context.Context, arg1 int64) (*models.Task, error) {
	args := []interface{}{
		arg0,
		arg1,
	}

	rets := this.Handler.Invoke("Get", args)

	ret0, ok := rets[0].(*models.Task)
	if rets[0] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid *models.Task value", rets[0]))
	}
	ret1, ok := rets[1].(error)
	if rets[1] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid error value", rets[1]))
	}

	return ret0, ret1
}

func (this *TaskRepository) List(arg0 context.Context) ([]*models.Task, error) {
	args := []interface{}{
		arg0,
	}

	rets := this.Handler.Invoke("List", args)

	ret0, ok := rets[0].([]*models.Task)
	if rets[0] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid []*models.Task value", rets[0]))
	}
	ret1, ok := rets[1].(error)
	if rets[1] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid error value", rets[1]))
	}

	return ret0, ret1
}

func (this *TaskRepository) Update(arg0 context.Context, arg1 *models.Task) error {
	args := []interface{}{
		arg0,
		arg1,
	}

	rets := this.Handler.Invoke("Update", args)

	ret0, ok := rets[0].(error)
	if rets[0] != nil && !ok {
		panic(fmt.Sprintf("%+v is not a valid error value", rets[0]))
	}

	return ret0
}
